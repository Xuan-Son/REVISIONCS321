
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 16 19:11:48 ICT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 16 19:11:48 ICT 2015
  */
public class SimpleCCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SimpleCCup() {super();}

  /** Constructor which sets the default scanner. */
  public SimpleCCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SimpleCCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\005\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\012\004\014\005\015\011\005\015\011\001" +
    "\002\000\006\007\ufffe\014\ufffe\001\002\000\012\004\014" +
    "\005\015\011\005\015\011\001\002\000\006\007\034\014" +
    "\035\001\002\000\022\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\025\013\024\014\ufff9\015\ufff9\001\002\000\004\002" +
    "\033\001\002\000\012\004\014\005\015\011\005\015\011" +
    "\001\002\000\022\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\001\002\000\012\007\ufffd" +
    "\010\021\011\022\014\ufffd\001\002\000\022\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\001\002\000\012\004\014\005\015\011\005\015\011\001" +
    "\002\000\006\007\uffff\014\uffff\001\002\000\010\006\020" +
    "\010\021\011\022\001\002\000\022\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\001\002" +
    "\000\012\004\014\005\015\011\005\015\011\001\002\000" +
    "\012\004\014\005\015\011\005\015\011\001\002\000\022" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\025\013\024\014" +
    "\ufffa\015\ufffa\001\002\000\012\004\014\005\015\011\005" +
    "\015\011\001\002\000\012\004\014\005\015\011\005\015" +
    "\011\001\002\000\022\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\001\002\000\022\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\001\002\000\022\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\025\013\024\014\ufffb\015\ufffb\001\002\000\010" +
    "\010\021\011\022\015\032\001\002\000\022\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\001\002\000\004\002\001\001\002\000\012\004\014\005" +
    "\015\011\005\015\011\001\002\000\004\002\000\001\002" +
    "\000\012\007\ufffc\010\021\011\022\014\ufffc\001\002\000" +
    "\022\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\020\002\007\003\005\004\015\005\003\006" +
    "\012\007\006\010\011\001\001\000\002\001\001\000\004" +
    "\010\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\030\007\006\010\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\016\007\006\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\027\010" +
    "\011\001\001\000\006\007\022\010\011\001\001\000\002" +
    "\001\001\000\004\010\026\001\001\000\004\010\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\035\007\006\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SimpleCCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SimpleCCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SimpleCCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

public void syntax_error(Symbol curToken) {
    if (curToken.value == null) {
       Errors.fatal(0,0, "SYNTAX ERROR at end of file");
    }
    else { 
       MySymbol cur = (MySymbol)curToken;
       Errors.fatal(cur.getLine(), cur.getColumn(),
            "SYNTAX ERROR while reading token " + ((Scanner)this.getScanner()).getTokName(cur.sym) + " ("+ ((Scanner)this.getScanner()).yytext() + ")");
    } 
    System.exit(-1);
} 

public void missing_character(char c)
{
	MySymbol cur = (MySymbol)cur_token;
    Errors.fatal(cur.getLine(), cur.getColumn() , "Syntax error: missing '" + c + "' before token " + ((Scanner)this.getScanner()).getTokName(cur.sym) + " ("+ ((Scanner)this.getScanner()).yytext() + ")"); 
    System.exit(-1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SimpleCCup$actions {
  private final SimpleCCup parser;

  /** Constructor */
  CUP$SimpleCCup$actions(SimpleCCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SimpleCCup$do_action(
    int                        CUP$SimpleCCup$act_num,
    java_cup.runtime.lr_parser CUP$SimpleCCup$parser,
    java.util.Stack            CUP$SimpleCCup$stack,
    int                        CUP$SimpleCCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SimpleCCup$result;

      /* select the action based on the action number */
      switch (CUP$SimpleCCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= MINUS factor 
            {
              Factor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new MinusFactor(f); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= ABS expr ABS 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).value;
		 RESULT = new AbsFactor(e); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).value;
		 RESULT = new ParenFactor(e); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // factor ::= INTLITERAL 
            {
              Factor RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Integer lit = (Integer)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new NumFactor(lit); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= factor 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new OneFactor(f); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term DIVIDE factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new DivideTerm(t,f); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= term TIMES factor 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new TimesTerm(t,f); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new OneTerm(t); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new MinusExpr(e,t); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new PlusExpr(e,t); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // moreexprlist ::= exprlist SEMICOLON expr 
            {
              MoreExprList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new MoreExprList(e, el); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("moreexprlist",3, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-2)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // oneexprlist ::= expr 
            {
              OneExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = new OneExprList(e); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("oneexprlist",2, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exprlist ::= moreexprlist 
            {
              ExprList RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		MoreExprList ml = (MoreExprList)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = ml; 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("exprlist",1, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exprlist ::= oneexprlist 
            {
              ExprList RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()).right;
		OneExprList ol = (OneExprList)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.peek()).value;
		 RESULT = ol; 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("exprlist",1, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exprlist PERIOD 
            {
              Program RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).right;
		ExprList el = (ExprList)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).value;
		 RESULT = new Program(el); 
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          return CUP$SimpleCCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)).value;
		RESULT = start_val;
              CUP$SimpleCCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.elementAt(CUP$SimpleCCup$top-1)), ((java_cup.runtime.Symbol)CUP$SimpleCCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SimpleCCup$parser.done_parsing();
          return CUP$SimpleCCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

